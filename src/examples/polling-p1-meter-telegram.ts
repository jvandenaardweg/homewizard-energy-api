import { P1MeterApi } from '..';

const api = new P1MeterApi('http://192.168.1.35', {
  polling: {
    interval: 1000,
  },
});

(() => {
  api.polling.getTelegram.start();

  api.polling.getTelegram.on('response', response => {
    // Receive the latest data of this P1 Meter from the /api/v1/telegram endpoint each second:
    // /ISK5\2M550T-1012

    // 1-3:0.2.8(50)
    // 0-0:1.0.0(221217230924W)
    // 0-0:96.1.1(4530303434303037303138303138313137)
    // 1-0:1.8.1(019055.805*kWh)
    // 1-0:1.8.2(019505.815*kWh)
    // 1-0:2.8.1(000000.002*kWh)
    // 1-0:2.8.2(000000.007*kWh)
    // 0-0:96.14.0(0001)
    // 1-0:1.7.0(00.305*kW)
    // 1-0:2.7.0(00.000*kW)
    // 0-0:96.7.21(00007)
    // 0-0:96.7.9(00004)
    // 1-0:99.97.0(1)(0-0:96.7.19)(171130183027W)(0000000944*s)
    // 1-0:32.32.0(00008)
    // 1-0:52.32.0(00007)
    // 1-0:72.32.0(00011)
    // 1-0:32.36.0(00001)
    // 1-0:52.36.0(00009)
    // 1-0:72.36.0(00009)
    // 0-0:96.13.0()
    // 1-0:32.7.0(226.9*V)
    // 1-0:52.7.0(225.7*V)
    // 1-0:72.7.0(224.8*V)
    // 1-0:31.7.0(000*A)
    // 1-0:51.7.0(000*A)
    // 1-0:71.7.0(000*A)
    // 1-0:21.7.0(00.068*kW)
    // 1-0:41.7.0(00.098*kW)
    // 1-0:61.7.0(00.137*kW)
    // 1-0:22.7.0(00.000*kW)
    // 1-0:42.7.0(00.000*kW)
    // 1-0:62.7.0(00.000*kW)
    // 0-1:24.1.0(003)
    // 0-1:96.1.0(4730303332353635353330393732333137)
    // 0-1:24.2.1(221217230503W)(06789.488*m3)
    // !A253

    console.log('response', response);
  });

  api.polling.getTelegram.on('error', error => {
    console.log('error', error);
  });

  setTimeout(() => {
    api.polling.getTelegram.stop();
  }, 10000); // stop after 10 seconds for the purpose of this example
})();
